Answers

1 - A pointer is a piece of variable that can store an address

2 - Please look at prob2.c for program and prob2.png for picture

  - Sample output
		t=hi and &t=00007ff6daa48010
		m=arrays != pointers and &m=00000025b91ff8c0
		x=00000025b91ff880 *x=77 &x=00000025b91ff8b8
		y=00000025b91ff8c5 *y=s &y=00000025b91ff8b0
		z=00000025b91ff89c *z=73 &z=00000025b91ff8a8
		w=00000025b91ff8b8 *w=00000025b91ff880 **w=77 &w=00000025b91ff8a0
		a=73 &a=00000025b91ff89c
		b=00000025b91ff880 *b=77 &b=00000025b91ff880
		
3 
  - Output of program
    m is 3749707088, &m is 3749707088, &m[0] is 3749707088, m[0] is 4
	p is 3749707096, &p is 3749707080, &p[0] is 3749707096, p[0] is 2
	
  - Please look prob3.png for diagram
  
  - First three letters of the first printf are the same because the name of an array in C contains its address which
    in other words is the address of the element at index 0
	
  - The value of a pointer stores the address of another variable and the pointer's in question own address is different from
    what is stored in it 
	
  - p[-1] is 3 and p[-2] is 4 because they are 1 and 2 sizeof(int) units away from the element at index 2 of m array respectively
  
4 
  a - 4
  b - 4 
  c - 2 
  d - 6
  e - 4
  
5 
  a - a[0]
  b - a[3]
  c - a[12]
  d - a[2]
  e - a[-10]
  
6 
  a - 6
  b - 3
  c - 4
  d - 5
  e - 7
  f - 5
  g - 7
  h - 1 